#!/usr/bin/env python3.9

import argparse
import functools
import pathlib
import queue
import re
import subprocess
import sys
import threading
import typing as t


def main() -> int:
    args = parse_args()

    formatter = find_formatter() if args.formatter is None else args.formatter
    if formatter is None:
        print_red('No formatter found. Is clang-format installed?')
        return 1

    in_queue: queue.Queue[t.Optional[pathlib.Path]] = queue.Queue()
    out_queue: queue.Queue[pathlib.Path] = queue.Queue()

    def worker_thread() -> None:
        while True:
            filename = in_queue.get()
            if filename is None:
                break
            if needs_reformatting(formatter, filename):
                out_queue.put(filename)

    workers = [threading.Thread(target=worker_thread) for _ in range(4)]

    all_files = []
    for filearg in args.files:
        for filename in get_files(filearg, args.extensions, args.ignore_dirs):
            in_queue.put(filename)
            all_files.append(filename)

    if not args.quiet:
        num_files = len(all_files)
        plural = '' if num_files == 1 else 's'
        print(f'Checking {num_files} file{plural} using {formatter}')

    for worker in workers:
        in_queue.put(None)
        worker.start()

    for worker in workers:
        worker.join()

    rcode = 0

    fileset = set()
    while True:
        try:
            filename = out_queue.get(block=False)
        except queue.Empty:
            break
        fileset.add(filename)
        rcode += 1

    cwd = pathlib.Path.cwd()

    for filename in all_files:
        if filename in fileset:
            if filename.is_relative_to(cwd):
                filename = filename.relative_to(cwd)
            print_red(f'{filename} needs formatting')

    return min(rcode, 127)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'files', type=pathlib.Path, nargs='*',
        help='files or directories to check. '
             'If not given, default to current directory')

    parser.add_argument(
        '-e', '--extensions', default=', '.join(['.cpp', '.hpp', '.c', '.h']),
        help='comma-separated list of file extensions to search for. '
             'Defaults to: %(default)s')

    parser.add_argument(
        '--ignore-dirs', default=['CMakeFiles', '.git'], nargs='*',
        help='ignore a directory. Can specify multiple times. Defaults to %(default)s')

    parser.add_argument(
        '-f', '--formatter', type=pathlib.Path,
        help='formatter command to use. By default uses the latest installed '
             'clang-format (/usr/bin/clang-format-*)')

    parser.add_argument(
        '-q', '--quiet', action='store_true',
        help='don\'t print the "Checking <num> files..." text')

    args = parser.parse_args()

    if not args.files:
        args.files = [pathlib.Path.cwd()]
    args.extensions = [ext.strip() for ext in args.extensions.split(',')]

    return args


def find_formatter() -> t.Optional[pathlib.Path]:
    pattern = re.compile('clang-format-([0-9]+)')
    matching_paths = (
        (path, pattern.match(path.name))
        for path in pathlib.Path('/usr/bin').glob('clang-format-*')
    )
    versioned_paths = (
        (path, int(match.group(1)))
        for path, match in matching_paths if match is not None
    )
    return max(versioned_paths, default=(None, 0), key=lambda x: x[1])[0]


def print_red(message: str, **kwargs: t.Any) -> None:
    red = tput_str('setaf', '1')
    none = tput_str('sgr0')
    print(f'{red}{message}{none}', **kwargs)


@functools.lru_cache()
def tput_str(*args: str) -> str:
    command = ['tput', *args]
    return subprocess.run(command, check=True, capture_output=True, text=True).stdout


def get_files(file: pathlib.Path, extensions: list[str],
              ignore_dirs: list[str]) -> list[pathlib.Path]:
    if file.is_dir():
        if file.name in ignore_dirs:
            return []
        return [
            file
            for subfile in file.iterdir()
            for file in get_files(subfile, extensions, ignore_dirs)
        ]
    elif file.is_file() and file.suffix in extensions:
        return [file]
    else:
        return []


def needs_reformatting(formatter: pathlib.Path, file: pathlib.Path) -> bool:
    proc = subprocess.run([formatter, '--dry-run', '-Werror', file],
                          stdout=subprocess.DEVNULL,
                          stderr=subprocess.DEVNULL)
    return proc.returncode != 0


if __name__ == '__main__':
    sys.exit(main())
