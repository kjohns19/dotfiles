#!/usr/bin/env python3.12

''' Create header (.hpp) and implementation (.cpp) files for C++ classes '''

import argparse
import dataclasses
import errno
import os
import pathlib
import re
import textwrap


@dataclasses.dataclass
class ClassInfo:
    name: str
    namespaces: list[str]


def main() -> None:
    args = parse_args()

    for class_info in args.classes:
        namespaces = args.namespaces + class_info.namespaces
        make_class(class_info.name, namespaces, args.mkdirs, args.srcdir)


def parse_args() -> argparse.Namespace:
    namespace_regex = re.compile(r'[a-zA-Z][a-zA-Z0-9_]*')

    def parse_namespaces(value: str) -> list[str]:
        namespaces = value.split('::')
        if not all(namespace_regex.match(ns) for ns in namespaces):
            raise ValueError
        return namespaces

    def parse_class(value: str) -> ClassInfo:
        *namespaces, classname = parse_namespaces(value)
        return ClassInfo(classname, namespaces)

    # For good error messages
    parse_namespaces.__name__ = 'namespace'
    parse_class.__name__ = 'class'

    parser = argparse.ArgumentParser(
        description=__doc__.strip(),
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        '-n', '--namespaces', default=[], type=parse_namespaces,
        help='Put all classes within these namespaces (e.g. foo::bar)')
    parser.add_argument(
        '-d', '--mkdirs', action='store_true',
        help='Make directories for namespaces (e.g. foo/bar/)')
    parser.add_argument(
        '-s', '--srcdir', default='src',
        help='Include the header file relative to this upper directory '
             '(e.g. if set to \'src\' and creating \'/code/src/foo/bar/baz.hpp\', '
             'the header will be included as: \'#include <foo/bar/baz.hpp>). '
             'Defaults to \'src\'. If the upper directory is not found, '
             'no path is added to the include')
    parser.add_argument(
        'classes', nargs='*', type=parse_class,
        help='Classes to make. May contain namespaces')
    return parser.parse_args()


def make_class(classname: str, namespaces: list[str], mkdirs: bool,
               src_dirname: str | None) -> None:
    snake_name = '_'.join(s.lower() for s in re.findall(r'[A-Z][^A-Z]*', classname))

    headerfile = pathlib.Path(snake_name + '.hpp')
    classfile = pathlib.Path(snake_name + '.cpp')

    if mkdirs and namespaces:
        path = pathlib.Path(*namespaces)
        path.mkdir(parents=True, exist_ok=True)
        headerfile = path / headerfile
        classfile = path / classfile

    includefile = headerfile
    if src_dirname is not None:
        relative_path = get_relative_path(src_dirname, pathlib.Path.cwd())
        if relative_path:
            includefile = relative_path / headerfile

    write_headerfile(headerfile, namespaces, classname)
    write_classfile(classfile, includefile, namespaces, classname)


def write_data(filename: pathlib.Path, data: str) -> None:
    flags = os.O_CREAT | os.O_EXCL | os.O_WRONLY
    try:
        fh = os.open(filename, flags, mode=0o644)
    except OSError as e:
        if e.errno == errno.EEXIST:
            print(f'{filename} already exists')
            return
        else:
            raise
    with os.fdopen(fh, 'w') as f:
        print(data, file=f)


def write_headerfile(filename: pathlib.Path, namespaces: list[str],
                     classname: str) -> None:
    write_data(filename, '\n'.join([
        '#pragma once',
        namespace_header(namespaces),
        class_definition(classname),
        namespace_footer(namespaces)
    ]).strip())


def write_classfile(filename: pathlib.Path, include_file: pathlib.Path,
                    namespaces: list[str], classname: str) -> None:
    write_data(filename, '\n'.join([
        f'#include <{include_file}>',
        namespace_header(namespaces),
        '// TODO',
        namespace_footer(namespaces)
    ]).strip())


def namespace_header(namespaces: list[str]) -> str:
    if namespaces:
        header = '\n'.join('namespace ' + ns + ' {' for ns in namespaces)
        return f'\n{header}\n'
    return ''


def namespace_footer(namespaces: list[str]) -> str:
    if namespaces:
        footer = '\n'.join('}  // close namespace ' + ns for ns in reversed(namespaces))
        return f'\n{footer}\n'
    return ''


def class_definition(classname: str) -> str:
    return textwrap.dedent(f'''
        class {classname}
        {{
          public:
            // TODO

          private:
            // TODO
        }};
    ''').strip()


def get_relative_path(dirname: str, path: pathlib.Path) -> pathlib.Path | None:
    parts = path.parts
    if dirname not in parts:
        return None
    idx = parts.index(dirname) + 1
    return pathlib.Path(*parts[idx:])


if __name__ == '__main__':
    main()
